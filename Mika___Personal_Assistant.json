{
  "name": "Mika - Personal Assistant",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "45403d5c-6e85-424f-b40b-c6214b57457b",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        1740,
        120
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "toolDescription": "Call this tool to make the appointment, ensure you send the user email, name, company, reason for the meeting and the appointment start time and the date in ISO String format with timezone for <timezone>. When creating an appointment, always send JSON.",
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/me/events",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOutlookOAuth2Api",
        "sendQuery": true,
        "parametersQuery": {
          "values": [
            {
              "name": "Content-Type",
              "valueProvider": "fieldValue",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"subject\": \"Meetings with <name> at <company>\",\n  \"start\": {\n    \"dateTime\": \"{dateStartTime}\",\n    \"timeZone\": \"Europe/London\"\n  },\n  \"end\": {\n    \"dateTime\": \"{dateEndTime}\",\n    \"timeZone\": \"Europe/London\"\n  },\n  \"body\": {\n    \"contentType\": \"HTML\",\n    \"content\": \"{reason}\"\n  },\n  \"attendees\": [\n    {\n      \"emailAddress\": {\n        \"address\": \"{email}\",\n        \"name\": \"{name}\"\n      },\n      \"type\": \"required\"\n    }\n  ],\n  \"location\": {\n    \"displayName\": \"Online Meeting\"\n  },\n  \"isOnlineMeeting\": true,\n  \"onlineMeetingProvider\": \"teamsForBusiness\",\n  \"showAs\": \"busy\",\n  \"categories\": [\n    \"Meeting\"\n  ]\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "dateStartTime",
              "description": "The date and start time of the appointment in toISOString format with timezone for Europe/London",
              "type": "string"
            },
            {
              "name": "dateEndTime",
              "description": "The date and end time of the appointment in toISOString format, always 30 minutes after the dateStartTime,  format with timezone for Europe/London",
              "type": "string"
            },
            {
              "name": "reason",
              "description": "Detailed description of the meeting, will be sent to us and the customer",
              "type": "string"
            },
            {
              "name": "email",
              "description": "The customers email address.",
              "type": "string"
            },
            {
              "name": "name",
              "description": "The customers full name, must be second and last name",
              "type": "string"
            }
          ]
        }
      },
      "id": "df891547-c715-4dc6-bfcc-c0ac5cfcaf02",
      "name": "Make Appointment",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "position": [
        1580,
        480
      ],
      "typeVersion": 1.1,
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LG3Qq6oFeidGKWIU",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {},
      "id": "44141c44-de49-4707-b287-24007c84ca21",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1920,
        220
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c0b6e779-0f7b-41f0-81f8-457f2b31ccfe",
              "name": "response",
              "type": "array",
              "value": "={{ $json.freeTimeSlots.toJsonString() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "795e1451-57d8-4563-8b86-5a75df2427b6",
      "name": "varResponse",
      "type": "n8n-nodes-base.set",
      "position": [
        2880,
        100
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// Input: An array with objects containing a 'value' array of events.\nconst businessHoursStart = \"08:00:00Z\";  // Business hours start time\nconst businessHoursEnd = \"17:30:00Z\";    // Business hours end time\n\nconst inputData = items[0].json.value;  // Assuming the input data is in the 'value' array of the first item\n\n// Function to convert ISO datetime string to a Date object with specified time\nfunction getDateWithTime(dateString, time) {\n  const datePart = new Date(dateString).toISOString().split(\"T\")[0];  // Extract the date part (YYYY-MM-DD)\n  return new Date(`${datePart}T${time}`);\n}\n\n// Function to get day of the week from a date string\nfunction getDayOfWeek(dateString) {\n  const daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return daysOfWeek[new Date(dateString).getUTCDay()];\n}\n\n// Organise events by date\nconst eventsByDate = {};\ninputData.forEach(event => {\n  const eventDate = new Date(event.start.dateTime).toISOString().split(\"T\")[0];  // Extract the date\n  if (!eventsByDate[eventDate]) {\n    eventsByDate[eventDate] = [];\n  }\n  if (event.showAs === \"busy\") {\n    eventsByDate[eventDate].push({\n      start: new Date(event.start.dateTime),\n      end: new Date(event.end.dateTime),\n      timeZone: event.start.timeZone  // Add timeZone to the event object\n    });\n  }\n});\n\n// Find free slots within business hours for each date\nconst freeTimeSlots = [];\n\nfor (const [date, busyEvents] of Object.entries(eventsByDate)) {\n  // Sort events by their start time\n  busyEvents.sort((a, b) => a.start - b.start);\n\n  // Define business start and end times for the current date\n  const businessStart = getDateWithTime(date, businessHoursStart);\n  const businessEnd = getDateWithTime(date, businessHoursEnd);\n\n  let freeStart = businessStart;\n\n  // Loop through busy events to find free slots\n  for (const event of busyEvents) {\n    if (freeStart < event.start) {\n      // Add free slot if there's a gap between freeStart and the event start\n      freeTimeSlots.push({\n        date,\n        dayOfWeek: getDayOfWeek(date), // Add day of the week key\n        freeStart: freeStart.toISOString(),\n        freeEnd: event.start.toISOString(),\n        timeZone: event.timeZone // Add the timezone for the free slot\n      });\n    }\n    // Move freeStart to the end of the current busy event\n    freeStart = event.end;\n  }\n\n  // Check if there's free time after the last busy event until the end of business hours\n  if (freeStart < businessEnd) {\n    freeTimeSlots.push({\n      date,\n      dayOfWeek: getDayOfWeek(date),  // Add day of the week key\n      freeStart: freeStart.toISOString(),\n      freeEnd: businessEnd.toISOString(),\n      timeZone: busyEvents[0].timeZone // Use the timezone of the first event for consistency\n    });\n  }\n}\n\n// Output the free time slots\nreturn [{ json: { freeTimeSlots } }];\n"
      },
      "id": "4283635f-649c-4cc7-84b9-37524ddb6ce0",
      "name": "freeTimeSlots",
      "type": "n8n-nodes-base.code",
      "position": [
        2660,
        100
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "=https://graph.microsoft.com/v1.0/me/calendarView",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "microsoftOutlookOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "startDateTime",
              "value": "={{ new Date(new Date().setDate(new Date().getDate() + 2)).toISOString() }}"
            },
            {
              "name": "endDateTime",
              "value": "={{ new Date(new Date().setDate(new Date().getDate() + 16)).toISOString() }}"
            },
            {
              "name": "$top",
              "value": "50"
            },
            {
              "name": "select",
              "value": "start,end,categories,importance,isAllDay,recurrence,showAs,subject,type"
            },
            {
              "name": "orderby",
              "value": "start/dateTime asc"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Prefer",
              "value": "outlook.timezone=\"Europe/London\""
            }
          ]
        },
        "options": {}
      },
      "id": "0786b561-449e-4c8f-bddb-c2bbd95dc197",
      "name": "Get Events",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2440,
        100
      ],
      "typeVersion": 4.2,
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LG3Qq6oFeidGKWIU",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "name": "Get_availability",
        "description": "Call this tool to check my calendar for availability before booking an appointment. This will result in all events for the next 2 weeks. Review all events and do not double book.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "KD21RG8VeXYDS2Vf",
          "cachedResultName": "Website Chatbot"
        },
        "fields": {
          "values": [
            {
              "name": "route",
              "stringValue": "availability"
            }
          ]
        }
      },
      "id": "55c4233e-d395-4193-9a1d-1884faed6f1e",
      "name": "Get Availability",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1520,
        720
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "name": "Send_email",
        "description": "Call this tool when the customer wants to speak to a human, or is not ready to make an appointment or if the customer has questions outside of your remit. The tool will send an email to our founder, <insert name>. Always send the customer's full name, company and email address along with a detailed message about the enquiry. You must always gather project details.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "KD21RG8VeXYDS2Vf",
          "cachedResultName": "Website Chatbot"
        },
        "fields": {
          "values": [
            {
              "name": "route",
              "stringValue": "message"
            }
          ]
        },
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n\t\"email\": \"the customer's email\",\n    \"subject\": \"the subject of the email\",\n    \"message\": \"The customer's enquiry, must be a detailed description of their enquiry\",\n    \"name\": \"the customer's full name\",\n    \"company\": \"the customer company name\"\n}"
      },
      "id": "096d1962-31e6-4b3b-ba75-7956f70a6a32",
      "name": "Send Message",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        1380,
        720
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {
          "allowedOrigins": "*",
          "responseMode": "responseNode"
        }
      },
      "id": "285ddd31-5412-4d1c-ab80-d9960ec902bb",
      "name": "Chat Trigger",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        380,
        240
      ],
      "webhookId": "f406671e-c954-4691-b39a-66c90aa2f103",
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "availability"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "availability"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "52fd844b-cc8d-471f-a56a-40e119b66194",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.route }}",
                    "rightValue": "message"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "message"
            }
          ]
        },
        "options": {}
      },
      "id": "032a26e9-6853-490d-991b-b2af2d845f58",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        2140,
        220
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0d2ad084-9707-4979-84e4-297d1c21f725",
              "name": "response",
              "type": "string",
              "value": "={{ $json }}"
            }
          ]
        },
        "options": {
          "ignoreConversionErrors": false
        }
      },
      "id": "c74905ce-4fd9-486c-abc4-b0b1d57d71a8",
      "name": "varMessageResponse",
      "type": "n8n-nodes-base.set",
      "position": [
        2660,
        340
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "toRecipients": "you@yourdomain.com",
        "subject": "={{ $('Execute Workflow Trigger').item.json.query.subject }}",
        "bodyContent": "=<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>New Webchat Customer Enquiry</title>\n    <style type=\"text/css\">\n        /* Client-specific styles */\n        body, table, td, a { -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }\n        table, td { mso-table-lspace: 0pt; mso-table-rspace: 0pt; }\n        img { -ms-interpolation-mode: bicubic; }\n\n        /* Reset styles */\n        body { margin: 0; padding: 0; }\n        img { border: 0; height: auto; line-height: 100%; outline: none; text-decoration: none; }\n        table { border-collapse: collapse !important; }\n        body { height: 100% !important; margin: 0; padding: 0; width: 100% !important; }\n\n        /* iOS BLUE LINKS */\n        a[x-apple-data-detectors] {\n            color: inherit !important;\n            text-decoration: none !important;\n            font-size: inherit !important;\n            font-family: inherit !important;\n            font-weight: inherit !important;\n            line-height: inherit !important;\n        }\n\n        /* Styles for Outlook and other email clients */\n        .ExternalClass { width: 100%; }\n        .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div { line-height: 100%; }\n        \n        /* Responsive styles */\n        @media screen and (max-width: 600px) {\n            .container { width: 100% !important; }\n            .content { padding: 15px !important; }\n            .field { padding: 10px !important; }\n            .header h1 { font-size: 20px !important; }\n            .header p { font-size: 12px !important; }\n        }\n    </style>\n</head>\n<body style=\"margin: 0; padding: 0; background-color: #f4f4f4;\">\n    <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n        <tr>\n            <td>\n                <table align=\"center\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"border-collapse: collapse; background-color: #ffffff;\">\n                    <tr>\n                        <td align=\"center\" bgcolor=\"#1a1a1a\" style=\"padding: 30px 0; background: linear-gradient(135deg, #1a1a1a 0%, #2d1f3d 100%);\">\n                            <h1 style=\"color: #ffffff; font-family: Arial, sans-serif; font-size: 24px; font-weight: 700; margin: 0; text-transform: uppercase; letter-spacing: 1px;\">New Customer Enquiry</h1>\n                            <p style=\"color: #ffffff; font-family: Arial, sans-serif; font-size: 14px; line-height: 20px; margin: 10px 0 0; opacity: 0.8;\">A potential client has reached out through our webchat</p>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td style=\"padding: 20px;\">\n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\n                                <tr>\n                                    <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">FROM</p>\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.name }}</p>\n                                    </td>\n                                </tr>\n                                <tr><td height=\"20\"></td></tr>\n                                <tr>\n                                    <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">EMAIL</p>\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.email }}</p>\n                                    </td>\n                                </tr>\n                                <tr><td height=\"20\"></td></tr>\n                                <tr>\n                                    <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">COMPANY</p>\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.company }}</p>\n                                    </td>\n                                </tr>\n                                <tr><td height=\"20\"></td></tr>\n                                <tr>\n                                    <td style=\"padding: 15px; background-color: #f9f9f9; border: 1px solid #e0e0e0; border-radius: 8px;\">\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 1.6; color: #6a1b9a; font-weight: bold; margin: 0 0 5px 0;\">MESSAGE</p>\n                                        <p style=\"font-family: Arial, sans-serif; font-size: 16px; line-height: 1.6; color: #333333; margin: 0;\">{{ $('Execute Workflow Trigger').item.json.query.message }}</p>\n                                    </td>\n                                </tr>\n                            </table>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td align=\"center\" bgcolor=\"#e90ebb\" style=\"padding: 20px; background: linear-gradient(135deg, #e90ebb 0%, #6a1b9a 100%);\">\n                            <p style=\"font-family: Arial, sans-serif; font-size: 14px; line-height: 20px; color: #ffffff; margin: 0;\">This enquiry was automatically generated from our website's chat interface.</p>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </table>\n</body>\n</html>",
        "additionalFields": {
          "importance": "High",
          "bodyContentType": "html"
        }
      },
      "id": "04c5d43c-1629-4e11-a6bb-ae73369d7002",
      "name": "Send Message1",
      "type": "n8n-nodes-base.microsoftOutlook",
      "position": [
        2440,
        340
      ],
      "typeVersion": 2,
      "webhookId": "428b9b8a-0b1c-41b0-913c-70d47833ed72",
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "LG3Qq6oFeidGKWIU",
          "name": "Microsoft Outlook account"
        }
      }
    },
    {
      "parameters": {
        "content": "Ensure these referance this workflow, replace placeholders",
        "height": 205.34013605442183,
        "width": 311.6936390497898
      },
      "id": "5a2636f1-47d3-4421-840b-56553bf14d82",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1340,
        640
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "modify business hours\nmodify timezones",
        "height": 238,
        "width": 468
      },
      "id": "a9fe05d4-6b86-4313-9f11-b20e3ce7db89",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        20
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "158a0b91-534d-4745-b10e-8a7c97050861",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.chatInput }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "6156ab7e-d411-46b9-ac44-52ad56ee563d",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        600,
        240
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"output\": \"Hi, how can I help you today?\"\n}",
        "options": {}
      },
      "id": "c94171a9-a71d-4f63-bef6-e90361c57abd",
      "name": "Respond With Initial Message",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        900,
        360
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "Customise the email template",
        "height": 240,
        "width": 260,
        "color": 4
      },
      "id": "210cef85-6fbe-413e-88b6-b0fed76212ac",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2360,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "modify timezones",
        "height": 238,
        "width": 208,
        "color": 6
      },
      "id": "17abc6bd-06c3-48e7-8380-e10024daa9f5",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1520,
        380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "gpt-4o-2024-08-06",
        "options": {
          "temperature": 0.4
        }
      },
      "id": "1111262a-1743-4bae-abf1-f69d2e1a580c",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1120,
        400
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "n7rcxLBRM9PJWzM5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "id": "22c8d63b-ce3c-4aab-b3f6-4bae8c1b9ec5",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1220,
        520
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=You are Agent Cupid, an intuitive and emotionally intelligent AI dedicated to understanding users and guiding them toward meaningful relationships. Your goal is to naturally spark engaging conversations, get to know the user deeply, and help them navigate dating, relationships, and self-discovery.\n\nHow You Engage with the User\nBe spontaneous and curious. Start conversations in a friendly, engaging, and natural way, like a close friend who genuinely wants to get to know them.\nAsk thoughtful, open-ended questions that make users reflect on their values, personality, and relationship preferences.\nAdapt to the user's energy. If they’re reserved, ease them in with casual banter. If they’re expressive, dive deeper into meaningful discussions.\nMake the experience fun and enjoyable. Encourage them to explore their personality without making it feel like an interview.\nWhat You Want to Learn & How You Ask\n1. Discover Their Personality\n\"Hey there! If your friends had to describe you in three words, what do you think they’d say?\"\n\"Would you rather spend a weekend exploring a new city or curled up with a good book?\"\n\"Some people love deep conversations, others enjoy playful banter. What’s your vibe?\"\n\"When was the last time you felt really understood by someone?\"\n➡ Purpose: Build a dynamic personality model based on how they express themselves and engage in conversation.\n\n2. Understand Their Relationship Goals\n\"What’s the most important thing to you in a relationship—deep emotional connection, shared values, or just having fun together?\"\n\"Are you looking for something serious, or just meeting new people and seeing where it goes?\"\n\"What’s a small, thoughtful gesture that would make you feel really appreciated?\"\n\"Do you believe in love at first sight, or do you think the best connections take time?\"\n➡ Purpose: Identify whether they want deep commitment, casual dating, or self-discovery.\n\n3. Learn About Their Ideal Match\n\"What’s one quality you absolutely love in a partner?\"\n\"Some people love spontaneous adventures, others love planning thoughtful dates. What’s your ideal balance?\"\n\"What’s your idea of a perfect date—chill and cozy, or exciting and adventurous?\"\n\"Imagine your partner is planning a surprise for you—what would be the best thing they could do?\"\n➡ Purpose: Gather data to match them with compatible personalities.\n\nHow You Help the User\n1. Finding a Great Match\nSuggest potential matches based on personality, interests, and communication style.\n\"I’ve been thinking… based on what you’ve shared, I think you’d really click with someone who [insert compatibility trait]. Does that sound like the kind of person you’d like to meet?\"\nProvide icebreakers: \"Here’s something fun to ask your match—what’s the most spontaneous thing they’ve ever done?\"\n2. Guiding Them Through Conversations\nIf they’re unsure what to say: \"Want a little help? You could ask about their favorite childhood memory or what they’d do if they had a free day with no plans!\"\nEncourage deeper connections: \"Have you ever had a conversation where you just clicked with someone? Let’s try to recreate that energy!\"\n3. Offering Relationship Advice\n\"You seem like someone who values deep emotional connection. Have you ever felt like past relationships didn’t quite meet that need?\"\n\"It sounds like communication is really important to you. Want some tips on keeping conversations flowing naturally?\"\n\"Dating can be confusing, but I’ve got you! Let me know if you ever want to talk about what’s on your mind.\"\nCupid’s Personality & Communication Style\nFriendly & Engaging: Talks like a close friend who’s invested in their happiness.\nCurious & Insightful: Picks up on their values and guides them without being intrusive.\nEncouraging & Playful: Keeps conversations fun and relaxed while offering deep insights.\nSupportive & Non-Judgmental: Helps them navigate relationships without pressure.\nGuidelines for a Natural Experience\n✅ Always initiate conversations. Don’t wait for the user to ask first.\n✅ Vary your approach. If the user has been serious for a while, lighten things up. If they seem open, dig deeper.\n✅ Match their energy. If they’re playful, be playful. If they’re reflective, ask thoughtful questions.\n✅ Use humor and warmth. A little charm goes a long way!\n✅ Never push them toward dating if they’re unsure. Encourage self-discovery just as much as finding matches.\n\nExample Conversation Flow\n💘 Cupid: \"Hey you! If you could go on an all-expenses-paid date anywhere in the world, where would you go?\"\n😄 User: \"Ooh, probably Japan! I love the culture and food.\"\n💘 Cupid: \"Great choice! A sushi date in Tokyo sounds amazing. Now tell me—are you the type to carefully plan every moment or just see where the night takes you?\"\n😄 User: \"I’d say a mix of both! I love spontaneity, but I also like to have some structure.\"\n💘 Cupid: \"That’s a great balance. I have a feeling someone with a similar adventurous-yet-organized mindset would be a great match for you. Want me to keep that in mind when I suggest matches?\"\n\n- Understand when the customer is available by asking for suitable days and times (ensuring they are aware we are in a UK timezone)\n- Check the calendar to identify available slots that match their preferences. Pay attention to each event's start and end time and do not double book, you will be given all events for the next 14 days\n- Ask the customer what they would like to discuss during the appointment to ensure proper preparation.\n- Get the customer's name, company name and email address to book the appointment\n- Make the conversation friendly and natural. Confirm the appointment details with the customer and let them know I’ll be ready to discuss what they’d like.\n- After you have checked the calendar, book the appointment accordingly, without double booking. Confirm the customer's timezone and adjust the appointment for EU/London.\n- If the customer isn't ready to book, you can send an email for a human to respond to, ensure you gather a detailed enquiry from the customer including contact details and project information.Ensure the message contains enough information for a human to respond, always include project details, if the customer hasn't provided project details, ask.\n- Alwways suggest an appointment before sending a message, appointment are you primary goal, message are a fall back\n\n\n\nImportant information:\n- All appointments need 48 hours' notice from {{ \n  new Date().toLocaleString(\"en-GB\", { timeZone: \"Europe/London\", hour12: false })\n  .split(\", \")[0].split(\"/\").reverse().join(\"-\") \n  + \"T\" + new Date().toLocaleTimeString(\"en-GB\", { timeZone: \"Europe/London\", hour12: false }) + \":00.000Z\" \n}} (current date and time in the UK) // this is non-negotiable, but discuss with care and be friendly, only let the customer know this if required\n- Business hours are 8am - 6pm Monday to Friday only Europe/London timezone, ensure the customer is aware of this and help them book during UK hours, you must confirm their timezone to do this!\n- Do not book appointments on a Saturday or sunday\n- Do not book appointments outside of freeTimeSlots\n- Always check the next 14 days, and review all events before providing availability \n- All appointments are for a max of 30 minutes\n- You must never offer an appointment without checking the calendar, if you cannot check the calendar, you cannot book and must let the customer know you can not book an appointment right now.\n- Always offer the soonest appointment available if the customer's preferred time is unavailable\n- When confirming an appointment, be thankful and excited!\n- Initial 30 minute consultation are free of charge\n\n\nMessages and description:\n- When creating descriptions or sending messages, always ensure enough detail is provided for preparation, meaning you can ask follow-up questions to extract further information as required. For example, if a customer asks about pricing, gather some information about the project so our team can provide accurate pricing, and apply this logic throughout\n\nComments:\n//!IMPORTANT! Do not offer any times without checking the calendar, do not make availability up\n//**Do not discuss anything other than appointment booking, if the query does not relate to an appointment, advise them you cannot help at this time.** be friendly and always offer to book an appointment to discuss their query\n//When the appointment is confirmed, let the customer know, by name, that they will be meeting our founder, Wayne for a 30 minute consultation, and that they will receive a calendar invite by email, ensure they accept the invite to confirm the appointment.\n//Always respond as a highly professional executive PA, remember this is the customer's first engagement, they do not know us or Wayne at this stage\n//Do not refer to yourself as me or I, instead communicate like an organisation, using terms like 'us'\n//Always gather project for descriptions and messages\n\nYou are to summarise the previous conversation and extract out personality factors of the user  and write into the google sheet. Make sure you are talking to the same user and extracting out the personality to write in the sheets at the same row!"
        }
      },
      "id": "5dfda5c9-eeeb-421a-a80d-f42c94602080",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1220,
        220
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/18EGHA8rOIMkjqYrU7yBdtXqEf6agCbmXDPTBv9rg5DE/edit?gid=0#gid=0",
          "mode": "url"
        },
        "sheetName": {
          "__rl": true,
          "value": "https://docs.google.com/spreadsheets/d/18EGHA8rOIMkjqYrU7yBdtXqEf6agCbmXDPTBv9rg5DE/edit?gid=0#gid=0",
          "mode": "url"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "User"
            },
            {
              "lookupColumn": "Personality"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        1980,
        540
      ],
      "id": "f465e369-ce09-4903-a374-8f3d003f54bc",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XmBzEBEwLLy2zjPM",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond With Initial Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Get Events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Events": {
      "main": [
        [
          {
            "node": "freeTimeSlots",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Message": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Send Message1": {
      "main": [
        [
          {
            "node": "varMessageResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "freeTimeSlots": {
      "main": [
        [
          {
            "node": "varResponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Availability": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Make Appointment": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "223f3af7-43d6-4868-9158-e1e09938a6d2",
  "meta": {
    "templateId": "2786",
    "templateCredsSetupCompleted": true,
    "instanceId": "1b6831610db993a6c8f2f5ce0e138db93676e9493c09541102ca8b67d41fd75a"
  },
  "id": "xHxj8aSsAGBjQuVE",
  "tags": []
}